
// 
// FlowScript decompiled by AtlusScriptLib by TGE (2017)
// In the unfortunate case of any bugs, please report them back to me.
// 


// 
// Imports
// 

import( "DungeonTravel.msg" );

// 
// Script-level variable definitions
// 

void entrance_jump_hook()
{
    int var29 = GET_FLOOR_ID();
	int mask = 0;
	if (BeatDungeon() == false)
		mask = 2;
    FUNCTION_0023( 0, 3 );
    SET_SEL_CHOICE_KEYBIND( 14, 2 );
    int var27 = ADV_SEL( 15, ENTRANCE_SEL_HOOK, mask );
    
    if ( var27 == 0 )
    {
        
        if ( GET_MONTH() == 4 && GET_DAY_OF_MONTH() == 17 )
        {
            OPEN_MSG_WIN();
            MSG( STOP_RETURN_ENTRANCE );
            CLOSE_MSG_WIN();
        }
        else 
        {
            return_tv_studio();
        }

    }
    else if ( var27 == 1 )
    {
		SelectFloor();
    }

}

// Called mid dungeon
void helper_order_hook()
{
    init_sel_mask();
    sVar9 = 30;
    
    if ( BIT_CHK( 0 + 52 ) == 1 )
    {
        sVar8 = 5;
        
        if ( CHECK_TIME_SPAN( 6, 13, 10, 9 ) == 1 )
        {
            sVar9 = 20;
        }

    }
    else 
    {
        sVar8 = 8;
    }

    
    if ( GET_FLOOR_ID() >= 160 && BIT_CHK( 0 + 0x0400 + 0x0800 + 136 ) == 1 )
    {
        BIT_OFF( 0 + 0x0400 + 0x0800 + 136 );
    }

    sVar7 = FUNCTION_005C( 280, -40, sVar8, sVar9 );
    OPEN_MSG_WIN();
    helper_dng_order();

    _100:
    int var33 = 0;
    
    if ( 1 )
    {
		// Sets mask
        SET_MASK( sVar1 );
        SET_SEL_CHOICE_KEYBIND( 14, 8 );
        var33 = SEL( DUNGEON_SEL_HOOK );
		
        if ( var33 == 0 )
        {
            talk_member();
            goto _101;
        }
        else if ( var33 == 1 || var33 == 2 )
        {
            
            if ( var33 >= 1 && var33 <= 2 && GET_FLOOR_ID() < 160 )
            {
                
                if ( GET_EQUIPMENT_ID( PartyUnit.Protagonist, 3 ) != GET_CNT( 242 ) && GET_EQUIPMENT_ID( PartyUnit.Protagonist, 3 ) != 1792 + 0 )
                {
                    CLOSE_MSG_WIN();
                }
                COStalk_SYSSET();
                
                if ( GET_CNT( 249 ) >= 5 )
                {
                    CLOSE_MSG_WIN();
                }

                FLD_FUNCTION_0047( var33 + 4, sVar7, sVar8, sVar9 );
                FLD_FUNCTION_0048();
            }

            
            if ( BIT_CHK( 0 + 0x0400 + 0x0800 + 136 ) == 0 )
            {
                
                if ( var33 == 1 )
                {
                    talk_helper_kuma();
                }
                else if ( var33 == 2 )
                {
                    talk_helper_rise();
                }

            }

            goto _101;
        }
        else if ( var33 == 3 )
        {
            change_order();
            goto _101;
        }

        else if ( var33 == 4 )
        {
            CLOSE_MSG_WIN();
            FUNCTION_005D( sVar7 );
            BIT_ON( 0 + 0x0400 + 0x0800 + 95 );
            goto_stair();
            return;
        }
        else if ( var33 == 5 || var33 == 6 )
        {
            CLOSE_MSG_WIN();
            FUNCTION_005D( sVar7 );
            BIT_ON( 0 + 0x0400 + 0x0800 + 95 );
            backto_stair();
            return;
        }
		// Select dungeon floor
        else if ( var33 == 7 )
        {
			CLOSE_MSG_WIN();
			SelectFloor();
            goto _101;
        }
		else if ( var33 == 8 ) 
        {
			goto _101;
        }
		
        goto _100;
    }

    _101:
    CLOSE_MSG_WIN();
    
    if ( sVar7 != 0 )
    {
        FUNCTION_005D( sVar7 );
    }

}

void init_sel_mask_hook()
{
	bool showFloorSelect = BeatDungeon();
    int var34 = GET_FLOOR_ID();
    sVar0 = 0;
    sVar2 = 63;
    sVar3 = 127;
    sVar1 = 0;
    int var35 = 0;
    _127:
    
    if ( var35 < 3 )
    {
        
        if ( GET_PARTY_MEMBER_ID( var35 ) == 2 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 1;
            sVar3 = sVar3 - 1;
        }
        else if ( GET_PARTY_MEMBER_ID( var35 ) == 3 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 2;
            sVar3 = sVar3 - 2;
        }
        else if ( GET_PARTY_MEMBER_ID( var35 ) == 4 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 4;
            sVar3 = sVar3 - 4;
        }
        else if ( GET_PARTY_MEMBER_ID( var35 ) == 6 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 8;
            sVar3 = sVar3 - 8;
        }
        else if ( GET_PARTY_MEMBER_ID( var35 ) == 7 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 0x10;
            sVar3 = sVar3 - 0x10;
        }
        else if ( GET_PARTY_MEMBER_ID( var35 ) == 8 )
        {
            sVar0 = sVar0 + 1;
            sVar2 = sVar2 - 0x20;
            sVar3 = sVar3 - 0x20;
        }

        var35 = var35 + 1;
        goto _127;
    }

    
    if ( sVar0 == 0 )
    {
        sVar1 = sVar1 + 9;
        
        if ( BIT_CHK( 0 + 52 ) == 1 )
        {
            sVar1 = sVar1 + 2;
        }
        else 
        {
            sVar1 = sVar1 + 4;
        }

    }
    else 
    {
        sVar1 = sVar1 + 6;
        
        if ( BIT_CHK( 0 + 52 ) == 1 )
        {
            sVar3 = sVar3 - 0x40;
        }
        else 
        {
            sVar3 = sVar3 - 0x20;
        }

    }

    // Hide Go to next floor if floor select is shown
    if ( FLD_FUNCTION_0036() == 0 || showFloorSelect == true)
    {
        sVar1 = sVar1 + 0x10;
    }

    sVar1 = sVar1 + 96;
    
	// Keep Return to previous floor/entrance hidden if floor select is shown
    if ( FLD_FUNCTION_0037() == 1 && showFloorSelect == false)
    {
        
        if ( var34 == 6 || var34 == 21 || var34 == 41 || var34 == 61 || var34 == 81 || var34 == 101 || var34 == 121 || var34 == 123 || var34 == 141 || var34 == 161 )
        {
            sVar1 = sVar1 - 0x40;
        }
        else 
        {
            sVar1 = sVar1 - 0x20;
        }

    }
	
	// Hide floor select
	if (showFloorSelect == false)
		sVar1 = sVar1 + 0x80;
}

void SelectFloor()
{
	bool ConsitentReaper = true;
	int floor = GET_FLOOR_ID();
	int EntranceFloor;
	int FloorText;
	// Get the entrance floor and floor text based on current floor
	// Yukiko
	if (floor >= 5 && floor < 14)
	{
		EntranceFloor = 5;
		FloorText = YukikoFloors1;
	}
	// Kanji
	else if (floor >= 20 && floor < 32)
	{
		EntranceFloor = 20;
		FloorText = KanjiFloors1;
	}
	// Rise
	else if (floor >= 40 && floor < 52)
	{
		EntranceFloor = 40;
		FloorText = RiseFloors1;
	}
	// Mitsuo
	else if (floor >= 60 && floor < 71)
	{
		EntranceFloor = 60;
		FloorText = MitsuoFloors1;
	}
	// Naoto
	else if (floor >= 80 && floor < 90)
	{
		EntranceFloor = 80;
		FloorText = NaotoFloors1;
	}
	// Nanako
	else if (floor >= 100 && floor < 111)
	{
		EntranceFloor = 100;
		FloorText = NanakoFloors1;
	}
	// Adachi
	else if (floor >= 120 && floor < 130)
	{
		EntranceFloor = 120;
		FloorText = AdachiFloors1;
	}
	
	int switchFloor = GET_FLOOR_ID() - EntranceFloor;
	int selectMask1;
	int selectMask2;
	// Hide current floor from options
	switch(switchFloor)
	{
		case 0:
			selectMask1 = 1;
			break;
		case 1:
			selectMask1 = 2;
			break;
		case 2:
			selectMask1 = 4;
			break;
		case 3:
			selectMask1 = 8;
			break;
		case 4:
			selectMask1 = 16;
			break;
		case 5:
			selectMask1 = 32;
			break;
		case 6:
			selectMask2 = 1;
			break;
		case 7:
			selectMask2 = 2;
			break;
		case 8:
			selectMask2 = 4;
			break;
		case 9:
			selectMask2 = 8;
			break;
		case 10:
			selectMask2 = 16;
			break;
		case 11:		
			selectMask2 = 32;
			break;
		case 12:
			selectMask2 = 64;
			break;
	}
	
	int selection;
	bool selected = false;
	bool firstPage = true;
	while (selected == false)
	{
		if (firstPage == true)
		{	
			SET_SEL_CHOICE_KEYBIND( 14, 7 );
			selection = ADV_SEL(SelectFloorsMsg, FloorText, selectMask1);
			firstPage = false;
			
			if (selection == 7)
			{
				CLOSE_MSG_WIN();
				return;
			}
			else if (selection != 6)
				selected = true;
				
			if (FloorText == AdachiFloors1 && selection > 0)
				selection = selection + 2;
		}
		else
		{
			// Close shortcuts
			switch (FloorText)
			{
				case AdachiFloors1:
					SET_SEL_CHOICE_KEYBIND( 14, 3 );
					break;
				case YukikoFloors1:
					SET_SEL_CHOICE_KEYBIND( 14, 4 );
					break;
				case KanjiFloors1:
				case RiseFloors1:
					SET_SEL_CHOICE_KEYBIND( 14, 7 );
					break;
				case MitsuoFloors1:
				case NanakoFloors1:
					SET_SEL_CHOICE_KEYBIND( 14, 6 );
					break;
				case NaotoFloors1:
					SET_SEL_CHOICE_KEYBIND( 14, 5 );
					break;
			}
			selection = ADV_SEL(SelectFloorsMsg, FloorText + 1, selectMask2);
			firstPage = true;
			
			switch (FloorText)
			{
				case AdachiFloors1:
					if (selection == 3)
					{
						CLOSE_MSG_WIN();
						return;
					}
					else if (selection != 2)
					{
						selection = selection + 8;
						selected = true;
					}
					break;
				case YukikoFloors1:
					if (selection == 4)
					{
						CLOSE_MSG_WIN();
						return;
					}
					else if (selection != 3)
					{
						selection = selection + 6;
						selected = true;
					}
					break;
				case KanjiFloors1:
				case RiseFloors1:
					if (selection == 7)
					{
						CLOSE_MSG_WIN();
						return;
					}
					else if (selection != 6)
					{
						selection = selection + 6;
						selected = true;
					}
					break;
				case MitsuoFloors1:
				case NanakoFloors1:
					if (selection == 6)
					{
						CLOSE_MSG_WIN();
						return;
					}
					else if (selection != 5)
					{
						selection = selection + 6;
						selected = true;
					}
					break;
				case NaotoFloors1:
					if (selection == 5)
					{
						CLOSE_MSG_WIN();
						return;
					}
					else if (selection != 4)
					{
						selection = selection + 6;
						selected = true;
					}
					break;
			}
		}
	}
	CLOSE_MSG_WIN();
	
	int nextFloor = selection + EntranceFloor;

	common_floor_change();
	
	if (ConsitentReaper && ( nextFloor == 5 || nextFloor == 20 || nextFloor == 40 || nextFloor == 60 || nextFloor == 80 || nextFloor == 100 || nextFloor == 120 || nextFloor == 140 || nextFloor == 160 ))
	{
		if ( BIT_CHK( 0 + 0x0400 + 0x0800 + 46 ) == 1)
		{
			SET_CNT( 999, 0 );
			BIT_OFF( 0 + 0x0400 + 0x0800 + 46 );
			BIT_OFF( 0 + 0x0400 + 0x0800 + 47 );
		}
	}
	
	FADE( 1, 10 );
	FADE_SYNC();
	
	if (nextFloor == 7 || nextFloor == 13 || nextFloor == 31 || nextFloor == 51 || nextFloor == 70 
		|| nextFloor == 89 || nextFloor == 110 || nextFloor == 129)
	{
		CALL_DUNGEON(nextFloor, 0);
	}
	else
		GOTO_REL_FLOOR( nextFloor - floor );
}

// Returns true if it's pass the deadlines
bool BeatDungeon()
{
	int floor = GET_FLOOR_ID();
	int month = GET_MONTH();
	int day = GET_DAY_OF_MONTH();
	// Yukiko
	if (floor >= 5 && floor < 14)
	{
		return CHECK_TIME_SPAN(4, 30, 3, 30);
	}
	// Kanji
	else if (floor >= 20 && floor < 32)
	{
		return CHECK_TIME_SPAN(6, 5, 3, 30);
	}
	// Rise
	else if (floor >= 40 && floor < 52)
	{
		return CHECK_TIME_SPAN(7, 10, 3, 30);
	}
	// Mitsuo
	else if (floor >= 60 && floor < 71)
	{
		return CHECK_TIME_SPAN(8, 13, 3, 30);
	}
	// Naoto
	else if (floor >= 80 && floor < 90)
	{
		return CHECK_TIME_SPAN(10, 6, 3, 30);
	}
	// Nanako
	else if (floor >= 100 && floor < 111)
	{
		return CHECK_TIME_SPAN(11, 21, 3, 30);
	}
	// Adachi
	else if (floor >= 120 && floor < 130)
	{
		return CHECK_TIME_SPAN(12, 25, 3, 30);
	}
	return false;
}