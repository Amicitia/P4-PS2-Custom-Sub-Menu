/*
	REQUIRED DEPENDENCIES
*/
import( "ModMenu.msg" ); //Mod Menu strings
import( "Utilities.flow" ); //Frequently reused Mod Menu operations

void ModMenuDisplay()
{
	// Disable Call Battle if not inside dungeon since it softlocks
	int mask = 8;
	int floor = GET_FLOOR_ID();
	if (floor > 1 && floor != 2 && floor != 3 && floor != 5 && floor != 20 && floor != 40 && floor != 60 && floor != 80 && floor != 100 && floor != 120 && floor != 140 && floor != 160)
		mask = 0;
	while(true) 
	{
		SET_SEL_CHOICE_KEYBIND(14, 8);
		int selection = ADV_SEL(Mod_Menu_Text, Mod_Menu, mask);
		switch (selection)
		{
			case 0:
				if (BGMSelect() == -1)
					break;
				else
					return;
			case 1:
				if (FieldSelect() == -1)
					break;
				else
					return;
			case 2:
				if (EventSelect() == -1)
					break;
				else
					return;
			case 3:
				if (BattleSelect() == -1)
					break;
				else
					return;
			case 4:
				if (FloorSelect() == -1)
					break;
				else
					return;
			case 5:
				if (Facilities() == -1)
					break;
				else
					return;
			case 6:
				if (DateSelect() == -1)
					break;
				else
					return;
			case 7:
				Misc();
				return;
			case 8:
				return;
		}
	}
}

int BGMSelect()
{
	int bgm = Get_Number(5, MSG_5);
	if (bgm == -1)
		return -1;
	CALL_BGM(bgm);
	return 0;
}

int FieldSelect()
{
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(3, MSG_3_Minor);
	if (minor == -1)
		return -1;
	FADE(2, 5);
	FADE_SYNC();
	CALL_FIELD(major, minor, 0, 0);
	return 0;
}

int EventSelect()
{
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(3, MSG_3_Minor);
	if (minor == -1)
		return -1;
	FADE(2, 5);
	FADE_SYNC();
	CALL_EVENT(major, minor, 0);
	if (floor > 0 )
		CALL_FLOOR(floor);
	else
		CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
	return 0;
}

int BattleSelect()
{
	SET_SEL_CHOICE_KEYBIND(14, 2);
	int battle = ADV_SEL(BATTLE_SEL_Text, BATTLE_SEL, 0);
	if (battle == 0)
	{
		int major = Get_Number(3, MSG_3);
		if (major == -1)
			return -1;
		CALL_BATTLE(major, 0);
	}
	else if (battle == 1)
	{
		return Battles();
	}
	return 0;
}

int DateSelect()
{
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return -1;
	int minor = Get_Number(2, MSG_2_Minor);
	if (minor == -1)
		return -1;
	NEXT_DATE(major, minor, 0);
	PLAY_SOUNDEFFECT( 173 );
	FADE( 1, 5 );
	FADE_SYNC();
	TV_STUDIO();
	return 0;
}

int Facilities()
{
	SET_SEL_CHOICE_KEYBIND(14, 6);
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int facility = ADV_SEL(Facility_Menu_Text, Facility_Menu, 0);
	switch (facility) 
	{
		case 0:
			CALL_FIELD(20, 1, 0, 0);
			return 0;
		case 1:
			TOWN_MAP(1);
			return 0;
		case 2:
			DAIDARA_SHOP();
			if (floor > 0 )
				CALL_FLOOR(floor);
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 3:
			SHIROKU_SHOP();
			if (floor > 0 )
				CALL_FLOOR(floor);
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 4:
			VELVET_ROOM();
			if (floor > 0 )
				CALL_FLOOR(floor);
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 5:
			JUNES_FOODCOURT();
			if (floor > 0 )
				CALL_FLOOR(floor);
			else
				CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
			return 0;
		case 6:
			return -1;
	}
	return -1;
}

void Misc()
{
	SET_SEL_CHOICE_KEYBIND(14, 8);
	int misc = ADV_SEL(Misc_Menu_Text, Misc_Menu, 0);
	switch (misc) 
	{
		case 0:
			Flag_Menu();
			break;
		case 1:
			AddParty();
			break;
		case 2:
			BAD_END_CREDITS();
			break;
		case 3:
			SpawnNPC();
			break;
		case 4:
			SL();
			break;
		case 5:
			CallDungeon();
			break;
		case 6:
			CutsceneSelect();
			break;
		case 7:
			ModMenuDisplay();
			break;
		case 8:
			return;
	}
}


void AddParty()
{
	int major = Get_Number(1, MSG_1);
	if (major == -1)
		return;
	ADD_PARTY(major);
	int floor = GET_FLOOR_ID();
	// Only reload floor mid-dungeon (not entrances) to get party member in
	if (floor > 1 && floor != 2 && floor != 3 && floor != 5 && floor != 20 && floor != 40 && floor != 60 && floor != 80 && floor != 100 && floor != 120 && floor != 140 && floor != 160)
	{
		FADE( 1, 10 );
		FADE_SYNC();
		CALL_FLOOR(floor);
	}
}

void CutsceneSelect()
{
	int floor = GET_FLOOR_ID();
	int fieldMajor = GET_FIELD_MAJOR();
	int fieldMinor = GET_FIELD_MINOR();
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return;
	STOP_BGM( 0 );
	PLAY_CUTSCENE(major);
	FUNCTION_0065();
	FADE(2, 5);
	FADE_SYNC();
	if (floor > 0 )
		CALL_FLOOR(floor);
	else
		CALL_FIELD(fieldMajor, fieldMinor, 0, 0);
}

void FloorSelect()
{
	int major = Get_Number(3, MSG_3);
	if (major == -1)
		return;
	dng_set_npc();
	FADE( 1, 10 );
	FADE_SYNC();
	CALL_FLOOR(major);
}

void SpawnNPC()
{
	int major = Get_Number(5, MSG_5);
	if (major == -1)
		return;
	SPAWN_NPC(0, major);
}

void CallDungeon()
{
	int major = Get_Number(3, MSG_3_Major);
	if (major == -1)
		return;
	int minor = Get_Number(3, MSG_3_Minor);
	if (minor == -1)
		return;
	FADE(4, 10);
	FADE_SYNC();
	CALL_DUNGEON(major, minor);
}

void Flag_Menu()
{
	int flag = ADV_SEL(Flag_Menu_Text, Flag_Menu, 0);
	switch (flag) 
	{
		case 0:
			ToggleBit();
			break;
		case 1:
			ToggleBitRange();
			break;
		case 2:
			break;
	}
}

void ToggleBit()
{
	int major = Get_Number(4, MSG_4);
	if (major == -1)
		return;
	int toggle = ADV_SEL(OnOff_Text, OnOff, 0);
	if (toggle == 0)
	{
		BIT_ON(major);
	}
	else
	{
		BIT_OFF(major);
	}
}

void ToggleBitRange()
{
	int major = Get_Number(4, MSG_4_Major);
	if (major == -1)
		return;
	int minor = Get_Number(4, MSG_4_Minor);
	if (minor == -1)
		return;
	int i = major;
	int toggle = ADV_SEL(OnOff_Text, OnOff, 0);
	if (toggle == 0)
	{
		while (i <= minor)
		{
			BIT_ON(i);
			i++;
		}
	}
	else
	{
		while (i <= minor)
		{
			BIT_OFF(i);
			i++;
		}
	}
}

void SL()
{
	SET_SEL_CHOICE_KEYBIND(14, 5);
	int sl = ADV_SEL(SL_Menu_Text, SL_Menu, 0);
	switch (sl)
	{
		case 0:
			IncreaseSL();
			break;
		case 1:
			ReverseSL();
			break;
		case 2:
			BreakSL();
			break;
		case 3:
			LevelUpSL();
			break;
		case 4:
			AddSL();
			break;
		case 5:
			break;
	}
}

void IncreaseSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	EVT_FUNCTION_0031( major, 50, 1 );
	SL_LVLUP_VISUAL(major, (GET_SL_LEVEL(major) + 1), 1);
	INCREASE_SL(major);
}

void ReverseSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	SL_LVLUP_VISUAL(major, 11, 1);
	REVERSE_SL(major, 1);
}

void BreakSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	SL_LVLUP_VISUAL(major, 12, 1);
	BREAK_SL(major, 1);
}

void LevelUpSL()
{
	int major = Get_Number(2, MSG_2_Major);
	if (major == -1)
		return;
	int minor = Get_Number(2, MSG_2_Minor);
	if (minor == -1)
		return;
	int oddity = Get_Number(2, MSG_2);
	if (oddity == -1)
		return;
	SL_LVLUP_VISUAL(major, minor, oddity);
	EVT_FUNCTION_003D();
}

void AddSL()
{
	int major = Get_Number(2, MSG_2);
	if (major == -1)
		return;
	EVT_FUNCTION_0016( major );
	EVT_FUNCTION_0031( major, 0, 1 );
}

int Battles()
{
	int boss = ADV_SEL( BOSS_SEL1_Text, BOSS_SEL1, 0 );
	switch (boss)
	{
		case 0:
			CALL_BATTLE( 512, 0 );
			break;
		case 1:
			CALL_BATTLE( 513, 0 );
			break;
		case 2:
			CALL_BATTLE( 514, 0 );
			break;
		case 3:
			CALL_BATTLE( 515, 0 );
			break;
		case 4:
			CALL_BATTLE( 516, 0 );
			break;
		case 5:
			CALL_BATTLE( 517, 0 );
			break;
		case 6:
			SET_SEL_CHOICE_KEYBIND(14, 8);
			int boss2 = ADV_SEL( BOSS_SEL2_Text, BOSS_SEL2, 0 );
			switch (boss2)
			{
				case 0:
					CALL_BATTLE( 518, 0 );
					break;
				case 1:
					CALL_BATTLE( 519, 0 );
					break;
				case 2:
					CALL_BATTLE( 520, 0 );
					break;
				case 3:
					CALL_BATTLE( 521, 0 );
					break;
				case 4:
					CALL_BATTLE( 522, 0 );
					break;
				case 5:
					CALL_BATTLE( 523, 0 );
					break;
				case 6:
					CALL_BATTLE( 524, 0 );
					break;
				case 7:
					CALL_BATTLE( 525, 0 );
					break;
				case 8:
					break;
			}
			break;
		case 7:
			return -1;
	}
	return 0;
}


